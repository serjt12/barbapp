services:
  backend:
    type: web
    name: backend
    env: docker
    docker:
      buildContext: ./backend
      dockerfile: Dockerfile.prod
    port: 8000
    envVars:
      - key: DB_HOST
        value: ${DB_HOST}
      - key: DB_PORT
        value: ${DB_PORT}
      - key: DB_NAME
        value: ${DB_NAME}
      - key: DB_USER
        value: ${DB_USER}
      - key: DB_PASSWORD
        value: ${DB_PASSWORD}
    networks:
      - barbapp-network
    dependsOn:
      - postgres

  frontend:
    type: web
    name: frontend
    env: docker
    docker:
      buildContext: ./frontend
      dockerfile: Dockerfile.prod
    networks:
      - barbapp-network

  nginx:
    type: web
    name: nginx
    env: docker
    docker:
      image: nginx:alpine
      ports:
        - port: 80
          targetPort: 80
        - port: 443
          targetPort: 443
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf:ro
        - ./certbot/conf:/etc/letsencrypt
        - ./certbot/www:/var/www/certbot
        - ./path/to/media:/path/to/media
    networks:
      - barbapp-network
    dependsOn:
      - backend
      - frontend

  postgres:
    type: database
    name: postgres
    env: docker
    docker:
      image: postgres:13
      volumes:
        - postgres_data:/var/lib/postgresql/data
      envVars:
        - key: POSTGRES_DB
          value: ${DB_NAME}
        - key: POSTGRES_USER
          value: ${DB_USER}
        - key: POSTGRES_PASSWORD
          value: ${DB_PASSWORD}
    networks:
      - barbapp-network

  certbot:
    type: job
    name: certbot
    env: docker
    docker:
      image: certbot/certbot
      entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
      volumes:
        - ./certbot/conf:/etc/letsencrypt
        - ./certbot/www:/var/www/certbot

networks:
  barbapp-network:
    driver: bridge

volumes:
  postgres_data:
